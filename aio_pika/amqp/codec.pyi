from datetime import datetime
from decimal import decimal
from io import BytesIO
from typing import Union, Tuple

__doc__ = """AMQP Table Encoding/Decoding"""


class long(int):
    """
    A marker class that signifies that the integer value should be
    serialized as `l` instead of `I`
    """
    ...

def unpack_from(
        fmt: str, buffer: BytesIO
) -> Tuple[Union[int, str, bool, float], ...]: ...

def pack_into(fmt: str, buffer: BytesIO, *data): ...

def as_bytes(value: Union[bytes, str]) -> bytes: ...
def encode_short_string(buffer: BytesIO, value: Union[bytes, str]) -> int: ...
def encode_long_string(buffer: BytesIO, value: Union[bytes, str]) -> int: ...
def encode_table(buffer: BytesIO, table: dict) -> int: ...
def encode_bool(buffer: BytesIO, value: bool) -> int: ...
def encode_int(buffer: BytesIO, value: int) -> int: ...
def encode_long(buffer: BytesIO, value: long) -> int: ...
def encode_decimal(buffer: BytesIO, value: decimal) -> int: ...
def encode_datetime(buffer: BytesIO, value: datetime) -> int: ...
def encode_value(buffer: BytesIO, value) -> int: ...

def decode_table(buffer: BytesIO) -> dict:
    """ Decode the AMQP table passed in from the encoded value returning the
    decoded result and the number of bytes read plus the offset.

    :param str encoded: The binary encoded data to decode
    :param int offset: The starting byte offset
    :rtype: tuple

    """
    ...

def decode_short_string(buffer) -> str: ...
def decode_long_string(buffer: BytesIO,
                       encoding='utf-8') -> Union[str, bytes]: ...

def decode_value(buffer: BytesIO):
    """
    Decode the value passed in returning the decoded value and the number
    of bytes read in addition to the starting offset.

    :param str encoded: The binary encoded data to decode
    :param int offset: The starting byte offset
    :rtype: tuple
    cdef bytes kind = buffer.read(1)

    """
    ...

def decode_array(buffer: BytesIO) -> list: ...
def decode_timestamp(buffer: BytesIO) -> datetime: ...
def decode_decimal(buffer: BytesIO) -> decimal: ...
